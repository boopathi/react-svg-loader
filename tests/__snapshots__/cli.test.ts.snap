// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`accept multiple arguments 1`] = `
"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from \\"react\\";
export default (({
  styles = {},
  ...props
}) => /*#__PURE__*/React.createElement(\\"svg\\", _extends({
  className: (styles[\\"class1\\"] || \\"class1\\") + \\" \\" + (styles[\\"class2\\"] || \\"class2\\"),
  style: {
    textAlign: \\"center\\",
    width: \\"100px\\",
    height: \\"100px\\"
  },
  fill: \\"#ddd\\",
  pointerEvents: \\"stroke\\"
}, props), /*#__PURE__*/React.createElement(\\"circle\\", {
  className: (styles[\\"class3\\"] || \\"class3\\") + \\" \\" + (styles[\\"class4\\"] || \\"class4\\"),
  cx: \\"50\\",
  cy: \\"50\\",
  r: \\"25\\",
  style: {
    textAlign: \\"center\\",
    stroke: \\"#000\\"
  },
  strokeWidth: \\"5\\"
})));
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from \\"react\\";
export default (({
  styles = {},
  ...props
}) => /*#__PURE__*/React.createElement(\\"svg\\", _extends({
  xmlns: \\"http://www.w3.org/2000/svg\\",
  width: \\"600\\",
  height: \\"600\\",
  version: \\"1.0\\"
}, props), /*#__PURE__*/React.createElement(\\"path\\", {
  d: \\"M207.661 52.05c11.06 1.091 14.684 14.198 13.064 23.563-4.517 20.585-11.1 42.078-16.673 62.562 4.133 13.394-23.874 8.257-14.232-2.573 10.213-24.968 17.852-56.387 17.841-83.552zm0-40.02c14.073-11.31 31.89 39.523-13.418 20.214-.173-2.514 13.971-17.692 13.418-20.214zm34.287 82.363V52.05c11.572 1.12 16.575 15.694 12.246 25.357-2.73 11.794-2.218 26.758 8.412 34.596 13.488 6.767 30.609-8.136 26.871-22.427.823-10.948-3.626-22.412 1.06-32.93 13.341-2.041 16.19 16.103 10.079 24.785-3.038 9.368 1.998 18.783.814 28.104-2.511 10.88-14.414 11.26-23.341 11.72-9.874 1.982-22.42 4.6-29.805-4.37-5.368-6.04-7.359-14.587-6.336-22.492zM368.913 54.11c-5.147 12.693-19.977 4.239-29.398 6.387-17.847 24.443 27.45 18.815 33.132 41.186.305 12.292-11.384 22.867-23.53 21.945-7.831 1.049-22.51 3.448-23.734-7.518 5.518-11.252 18.665 1.67 26.957-2.695 11.32-5.47 4.92-21.046-5.783-22.541-7.538-2.175-16.864-.615-22.217-7.73-7.911-7.876-5.516-21.613 3.082-27.956 12.039-9.021 28.354-5.038 41.491-1.078zm33.475-21.92c-6.976 9.517 5.691 24.353 16.168 18.864 6.337 12.455-15.748 10.763-16.075 21.335-12.982 23.475 12.85 39.601 7.023 51.075-13.627-.998-20.768-16.456-19.149-28.767.838-9.661 3.055-19.99-1.627-29.068-3.431-11.68-1.104-27.043 10.432-33.375l1.61-.223 1.618.158zM46.87 279.892c-29.327-17.606-36.11 47.89-2.928 32.069 12.664-3.817 29.282-38.242 2.929-32.069zm27.505-5.695c-1.587 15.028 9.272 54.786-18.35 41.885-15.953 11.358-39.909 15.488-49.858-6.098-11.942-27.666 17.912-46.586 41.85-39.792 26.865-13.048-9.934-32.122-25.194-19.435-23.466-1.971 1.916-19.957 14.342-15.087 19.778-.545 39.695 15.458 37.234 36.362l-.013 1.21-.011.955zm98.25-2.773c-5.707 15.078 12.557 44.191-11.2 48.073-12.098-21.543 13.76-63.188-20.44-70.505-30.98 1.706-27.7 37.506-22.91 58.247-1.015 17.102-20.533 14.315-15.449-3.072 1.703-19.057-8.315-57.834 8.962-63.765 16.126 13.468 30.536-19 47.743-.107 9.395 7.08 15.19 19.338 13.294 31.129zm52.925 39.755c22.78 6.387 36.557-22.009 31.295-41-21.09-49.963-71.686 6.3-31.295 41zm7.254-75.053c77.666 10.689 20.87 134.708-33.591 67.844-13.41-24.717-1.955-65.248 29.434-67.732l4.157-.112zm74.943-21.809c-11.793 20.634 20.013 25.85 26.695 29.492-10.83 9.465-36.716 5.666-27.32 28.947-3.57 20.583 5.912 40.134 26.273 43.384-13.576 20.699-46.382-3.264-40.421-25.749 6.33-18.118-3.637-37.402-5.646-51.392 16.837-6.842-3.714-33.003 20.42-24.682zm116.387 57.107c-5.707 15.078 12.556 44.191-11.2 48.073-12.099-21.543 13.76-63.188-20.44-70.505-29.99 1.534-28.603 36.527-22.664 56.965-4.237 26.292-22.89 6.053-16.177-10.641.84-24.996 1.075-50.104-1.477-74.977 4.788-25.154 24.051-5.663 15.387 10.415-4.024 13.483 2.914 22.122 12.68 8.19 20.502-10.544 50.311 8.643 43.89 32.48zm99.45 5.246c-13.848 22.584-57.32-12.264-60.333 19.633 5.995 27.374 46.68 8.2 53.832 17.201-14.606 21.688-50.984 11.04-64.644-7.165-19.36-27.393 2.101-75.762 38.172-70.64 19.394 2.027 35.682 21.38 32.972 40.97zm-13.79-4.047c7.53-30.068-55.376-32.32-44.523-2.597 12.745 9.343 30.319-1.562 44.523 2.597zm85.06-21.584c-20.874-10.731-37.939 13.772-37.26 32.785.982 11.773 10.244 42.539-10.87 34.618-.46-26.488-4.319-54.095 1.845-80.382 11.02 1.066 18.484 14.91 26.248-.821 9.471-4.851 27.304.354 20.037 13.8z\\"
}), /*#__PURE__*/React.createElement(\\"path\\", {
  style: {
    fill: \\"red\\"
  },
  d: \\"M17.026 63.79c-16.275.268-3.143 2.597-3.912 5.533-5.067.964-9.52-5.757-6.305-9.952 1.95-3.653 8.46-4.173 10.093.022.63 1.366.726 3.004.124 4.397zm-1.72-1.134c3.547-3.942-7.652-6.047-4.54-1.351 1.359.913 3.195.4 4.54 1.351zm16.002-.265c-4.177 1.133-6.638 6.272-3.837 9.838-1.524 1.823-3.217-1.153-2.614-2.592-1.12-2.599-7.457 2.617-5.47-.748 3.773-1.338 3.011-5.178 2.674-8.04 2.003-.474 2.31 4.924 5.107 2.477 1.182-.78 2.76-2.258 4.14-.935zm6.36 8.208c-4.2-3.976-5.15 7.374-.362 3.868 1.437-.613 3.253-4.078.363-3.868zm4.01.374c.663 4.335-4.752 7.388-8.346 5.25-3.898-1.329-2.713-8.546 1.672-7.655 2.133 2.025 7.136-1.566 2.652-2.278-2.414-.376-2.49-3.65.381-2.364 2.81.819 5.19 4.199 3.64 7.047zm20.701 5.674c-.372 1.913-1.218 7.388-3.488 5.363.879-2.97 3.645-9.78-1.943-9.244-3.158.805-2.04 8.202-5.419 6.73.179-2.936 4.33-7.6-.697-8.817-4.934-.771-3.346 5.057-5.545 7.356-2.37-1.702.184-6.388 1.337-8.62 4.296-1.509 16.995 1.464 15.755 7.232zm4.047 7.202c1.19 1.929-4.311 10.644-4.075 6.468 1.44-3.735 3.38-12.316 5.04-15.461 3.637-1.075 8.992.494 9.201 4.896.457 4.041-3.525 8.678-7.75 7.014-1.218-.484-2.275-1.57-2.416-2.917zm7.66-2.046c2.766-3.752-4.822-7.493-6.525-3.425-1.668 2.216-.305 5.398 2.14 6.34 2.328 1.184 3.988-.83 4.386-2.915zm8.233-8.678c1.986 2.362-.664 15.323-4.072 14.15.745-4.887 3.044-9.326 4.072-14.15zm12.683 14.56c-16.276.268-3.144 2.597-3.912 5.533-5.067.964-9.52-5.757-6.305-9.953 1.95-3.652 8.46-4.172 10.093.023.63 1.366.726 3.003.124 4.397zm-1.72-1.134c3.546-3.942-7.652-6.047-4.54-1.351 1.358.913 3.195.4 4.54 1.351z\\",
  transform: \\"matrix(6.39514 0 0 6.39514 -22.626 -7.108)\\"
})));
"
`;

exports[`accept single argument 1`] = `
"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React from \\"react\\";
export default (({
  styles = {},
  ...props
}) => /*#__PURE__*/React.createElement(\\"svg\\", _extends({
  className: (styles[\\"class1\\"] || \\"class1\\") + \\" \\" + (styles[\\"class2\\"] || \\"class2\\"),
  style: {
    textAlign: \\"center\\",
    width: \\"100px\\",
    height: \\"100px\\"
  },
  fill: \\"#ddd\\",
  pointerEvents: \\"stroke\\"
}, props), /*#__PURE__*/React.createElement(\\"circle\\", {
  className: (styles[\\"class3\\"] || \\"class3\\") + \\" \\" + (styles[\\"class4\\"] || \\"class4\\"),
  cx: \\"50\\",
  cy: \\"50\\",
  r: \\"25\\",
  style: {
    textAlign: \\"center\\",
    stroke: \\"#000\\"
  },
  strokeWidth: \\"5\\"
})));
"
`;

exports[`accepts yaml/json/js svgo config 1`] = `
"import React from \\"react\\";
export default (({
  styles = {},
  ...props
}) => <svg className={(styles[\\"class1\\"] || \\"class1\\") + \\" \\" + (styles[\\"class2\\"] || \\"class2\\")} style={{
  textAlign: \\"center\\",
  width: \\"100px\\",
  height: \\"100px\\"
}} fill=\\"#ddd\\" pointerEvents=\\"stroke\\" {...props}>
    <circle className={(styles[\\"class3\\"] || \\"class3\\") + \\" \\" + (styles[\\"class4\\"] || \\"class4\\")} cx=\\"50\\" cy=\\"50\\" r=\\"25\\" style={{
    textAlign: \\"center\\",
    stroke: \\"#000\\"
  }} strokeWidth=\\"5\\" />
</svg>);
"
`;

exports[`accepts yaml/json/js svgo config 2`] = `
"import React from \\"react\\";
export default (({
  styles = {},
  ...props
}) => <svg className={(styles[\\"class1\\"] || \\"class1\\") + \\" \\" + (styles[\\"class2\\"] || \\"class2\\")} style={{
  textAlign: \\"center\\",
  width: \\"100px\\",
  height: \\"100px\\"
}} fill=\\"#ddd\\" pointerEvents=\\"stroke\\" {...props}>
    <circle className={(styles[\\"class3\\"] || \\"class3\\") + \\" \\" + (styles[\\"class4\\"] || \\"class4\\")} cx=\\"50\\" cy=\\"50\\" r=\\"25\\" style={{
    textAlign: \\"center\\",
    stroke: \\"#000\\"
  }} strokeWidth=\\"5\\" />
</svg>);
"
`;

exports[`accepts yaml/json/js svgo config 3`] = `
"import React from \\"react\\";
export default (({
  styles = {},
  ...props
}) => <svg className={(styles[\\"class1\\"] || \\"class1\\") + \\" \\" + (styles[\\"class2\\"] || \\"class2\\")} style={{
  textAlign: \\"center\\",
  width: \\"100px\\",
  height: \\"100px\\"
}} fill=\\"#ddd\\" pointerEvents=\\"stroke\\" {...props}>
    <circle className={(styles[\\"class3\\"] || \\"class3\\") + \\" \\" + (styles[\\"class4\\"] || \\"class4\\")} cx=\\"50\\" cy=\\"50\\" r=\\"25\\" style={{
    textAlign: \\"center\\",
    stroke: \\"#000\\"
  }} strokeWidth=\\"5\\" />
</svg>);
"
`;

exports[`generate jsx 1`] = `
"import React from \\"react\\";
export default (({
  styles = {},
  ...props
}) => <svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"600\\" height=\\"600\\" version=\\"1.0\\" {...props}><path d=\\"M207.661 52.05c11.06 1.091 14.684 14.198 13.064 23.563-4.517 20.585-11.1 42.078-16.673 62.562 4.133 13.394-23.874 8.257-14.232-2.573 10.213-24.968 17.852-56.387 17.841-83.552zm0-40.02c14.073-11.31 31.89 39.523-13.418 20.214-.173-2.514 13.971-17.692 13.418-20.214zm34.287 82.363V52.05c11.572 1.12 16.575 15.694 12.246 25.357-2.73 11.794-2.218 26.758 8.412 34.596 13.488 6.767 30.609-8.136 26.871-22.427.823-10.948-3.626-22.412 1.06-32.93 13.341-2.041 16.19 16.103 10.079 24.785-3.038 9.368 1.998 18.783.814 28.104-2.511 10.88-14.414 11.26-23.341 11.72-9.874 1.982-22.42 4.6-29.805-4.37-5.368-6.04-7.359-14.587-6.336-22.492zM368.913 54.11c-5.147 12.693-19.977 4.239-29.398 6.387-17.847 24.443 27.45 18.815 33.132 41.186.305 12.292-11.384 22.867-23.53 21.945-7.831 1.049-22.51 3.448-23.734-7.518 5.518-11.252 18.665 1.67 26.957-2.695 11.32-5.47 4.92-21.046-5.783-22.541-7.538-2.175-16.864-.615-22.217-7.73-7.911-7.876-5.516-21.613 3.082-27.956 12.039-9.021 28.354-5.038 41.491-1.078zm33.475-21.92c-6.976 9.517 5.691 24.353 16.168 18.864 6.337 12.455-15.748 10.763-16.075 21.335-12.982 23.475 12.85 39.601 7.023 51.075-13.627-.998-20.768-16.456-19.149-28.767.838-9.661 3.055-19.99-1.627-29.068-3.431-11.68-1.104-27.043 10.432-33.375l1.61-.223 1.618.158zM46.87 279.892c-29.327-17.606-36.11 47.89-2.928 32.069 12.664-3.817 29.282-38.242 2.929-32.069zm27.505-5.695c-1.587 15.028 9.272 54.786-18.35 41.885-15.953 11.358-39.909 15.488-49.858-6.098-11.942-27.666 17.912-46.586 41.85-39.792 26.865-13.048-9.934-32.122-25.194-19.435-23.466-1.971 1.916-19.957 14.342-15.087 19.778-.545 39.695 15.458 37.234 36.362l-.013 1.21-.011.955zm98.25-2.773c-5.707 15.078 12.557 44.191-11.2 48.073-12.098-21.543 13.76-63.188-20.44-70.505-30.98 1.706-27.7 37.506-22.91 58.247-1.015 17.102-20.533 14.315-15.449-3.072 1.703-19.057-8.315-57.834 8.962-63.765 16.126 13.468 30.536-19 47.743-.107 9.395 7.08 15.19 19.338 13.294 31.129zm52.925 39.755c22.78 6.387 36.557-22.009 31.295-41-21.09-49.963-71.686 6.3-31.295 41zm7.254-75.053c77.666 10.689 20.87 134.708-33.591 67.844-13.41-24.717-1.955-65.248 29.434-67.732l4.157-.112zm74.943-21.809c-11.793 20.634 20.013 25.85 26.695 29.492-10.83 9.465-36.716 5.666-27.32 28.947-3.57 20.583 5.912 40.134 26.273 43.384-13.576 20.699-46.382-3.264-40.421-25.749 6.33-18.118-3.637-37.402-5.646-51.392 16.837-6.842-3.714-33.003 20.42-24.682zm116.387 57.107c-5.707 15.078 12.556 44.191-11.2 48.073-12.099-21.543 13.76-63.188-20.44-70.505-29.99 1.534-28.603 36.527-22.664 56.965-4.237 26.292-22.89 6.053-16.177-10.641.84-24.996 1.075-50.104-1.477-74.977 4.788-25.154 24.051-5.663 15.387 10.415-4.024 13.483 2.914 22.122 12.68 8.19 20.502-10.544 50.311 8.643 43.89 32.48zm99.45 5.246c-13.848 22.584-57.32-12.264-60.333 19.633 5.995 27.374 46.68 8.2 53.832 17.201-14.606 21.688-50.984 11.04-64.644-7.165-19.36-27.393 2.101-75.762 38.172-70.64 19.394 2.027 35.682 21.38 32.972 40.97zm-13.79-4.047c7.53-30.068-55.376-32.32-44.523-2.597 12.745 9.343 30.319-1.562 44.523 2.597zm85.06-21.584c-20.874-10.731-37.939 13.772-37.26 32.785.982 11.773 10.244 42.539-10.87 34.618-.46-26.488-4.319-54.095 1.845-80.382 11.02 1.066 18.484 14.91 26.248-.821 9.471-4.851 27.304.354 20.037 13.8z\\" /><path style={{
    fill: \\"red\\"
  }} d=\\"M17.026 63.79c-16.275.268-3.143 2.597-3.912 5.533-5.067.964-9.52-5.757-6.305-9.952 1.95-3.653 8.46-4.173 10.093.022.63 1.366.726 3.004.124 4.397zm-1.72-1.134c3.547-3.942-7.652-6.047-4.54-1.351 1.359.913 3.195.4 4.54 1.351zm16.002-.265c-4.177 1.133-6.638 6.272-3.837 9.838-1.524 1.823-3.217-1.153-2.614-2.592-1.12-2.599-7.457 2.617-5.47-.748 3.773-1.338 3.011-5.178 2.674-8.04 2.003-.474 2.31 4.924 5.107 2.477 1.182-.78 2.76-2.258 4.14-.935zm6.36 8.208c-4.2-3.976-5.15 7.374-.362 3.868 1.437-.613 3.253-4.078.363-3.868zm4.01.374c.663 4.335-4.752 7.388-8.346 5.25-3.898-1.329-2.713-8.546 1.672-7.655 2.133 2.025 7.136-1.566 2.652-2.278-2.414-.376-2.49-3.65.381-2.364 2.81.819 5.19 4.199 3.64 7.047zm20.701 5.674c-.372 1.913-1.218 7.388-3.488 5.363.879-2.97 3.645-9.78-1.943-9.244-3.158.805-2.04 8.202-5.419 6.73.179-2.936 4.33-7.6-.697-8.817-4.934-.771-3.346 5.057-5.545 7.356-2.37-1.702.184-6.388 1.337-8.62 4.296-1.509 16.995 1.464 15.755 7.232zm4.047 7.202c1.19 1.929-4.311 10.644-4.075 6.468 1.44-3.735 3.38-12.316 5.04-15.461 3.637-1.075 8.992.494 9.201 4.896.457 4.041-3.525 8.678-7.75 7.014-1.218-.484-2.275-1.57-2.416-2.917zm7.66-2.046c2.766-3.752-4.822-7.493-6.525-3.425-1.668 2.216-.305 5.398 2.14 6.34 2.328 1.184 3.988-.83 4.386-2.915zm8.233-8.678c1.986 2.362-.664 15.323-4.072 14.15.745-4.887 3.044-9.326 4.072-14.15zm12.683 14.56c-16.276.268-3.144 2.597-3.912 5.533-5.067.964-9.52-5.757-6.305-9.953 1.95-3.652 8.46-4.172 10.093.023.63 1.366.726 3.003.124 4.397zm-1.72-1.134c3.546-3.942-7.652-6.047-4.54-1.351 1.358.913 3.195.4 4.54 1.351z\\" transform=\\"matrix(6.39514 0 0 6.39514 -22.626 -7.108)\\" /></svg>);
"
`;
